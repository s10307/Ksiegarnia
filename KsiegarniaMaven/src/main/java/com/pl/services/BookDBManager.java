package com.pl.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import com.pl.biblioteka.*;

public class BookDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addBookStmt;
	private PreparedStatement getBookStmt;
	private PreparedStatement deleteAllBooksStmt;
	private PreparedStatement findBookByNameStmt;
	private PreparedStatement findBookByAuthorStmt;
	private PreparedStatement deleteBookStmt;

	List<Integer> listID = new ArrayList<Integer>();

	public BookDBManager() {
		try {
			Properties props = new Properties();

			try {
				props.load(ClassLoader
						.getSystemResourceAsStream("com/pl/reso/jdbc.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}

			conn = DriverManager.getConnection(props.getProperty("url"));

			stmt = conn.createStatement();
			boolean BookTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) {
				if ("books".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					BookTableExists = true;
					break;
				}
			}

			if (!BookTableExists) {
				stmt.executeUpdate("CREATE TABLE books(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
						+ "name varchar(40), author varchar(40))");
			}

			addBookStmt = conn
					.prepareStatement("INSERT INTO books (name, author) VALUES (?, ?)");

			getBookStmt = conn.prepareStatement("SELECT * FROM books");

			deleteAllBooksStmt = conn.prepareStatement("DELETE FROM books");

			findBookByNameStmt = conn
					.prepareStatement("SELECT id FROM books WHERE name= ?");

			findBookByAuthorStmt = conn
					.prepareStatement("SELECT id FROM books WHERE author= ?");

			deleteBookStmt = conn
					.prepareStatement("DELETE FROM books WHERE id = ?");
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	public void addBook(Book book) {
		try {
			addBookStmt.setString(1, book.getName());
			addBookStmt.setString(2, book.getAuthor());

			addBookStmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Book> getAllBooks() {
		List<Book> BookList = new ArrayList<Book>();
		try {
			ResultSet rs = getBookStmt.executeQuery();
			while (rs.next()) {
				BookList.add(new Book(rs.getString("name"), rs
						.getString("author")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return BookList;
	}

	public void deleteAllBooks() {
		try {
			deleteAllBooksStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> findBookByName(String name) {
		try {
			List<Integer> BookList = new ArrayList<Integer>();
			findBookByNameStmt.setString(1, name);
			ResultSet rs = findBookByNameStmt.executeQuery();
			while (rs.next())
				BookList.add(rs.getInt("ID"));
			return BookList;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> findBookByAuthor(String author) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findBookByAuthorStmt.setString(1, author);
			ResultSet rs = findBookByAuthorStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteBook(List<Integer> BookList) {
		try {
			for (Integer id : BookList) {
				deleteBookStmt.setInt(1, id);
				deleteBookStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// klasa anonimowa
	public void printBookWithCondition(List<Book> BookList, Condition condition) {
		for (Book book : BookList) {
			if (condition.getCondition(book)) {
				System.out.println("Name: " + book.getName() + "\nAuthor: "
						+ book.getAuthor());
			}
		}
	}

}